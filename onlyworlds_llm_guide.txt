OnlyWorlds LLM Understanding Guide
========================================

## What is OnlyWorlds?

OnlyWorlds is an open-source standard for defining digital worlds as lightweight, text-based data. It enables data portability and uniformity across applications for writing, organizing, mapping, showcasing, simulating and gamifying worlds.

**Core Problem Solved**: Data lock-in where world information created in one tool cannot easily be used in another. OnlyWorlds provides a common, open standard for world data interchange.

**Key Principles**:
- Open source and community-driven
- Text-based structured data (JSON Schema foundation)
- Interoperability between tools and applications
- Creator data ownership
- Flexibility across genres (fantasy, sci-fi, historical, etc.)

## Data Structure Foundation

OnlyWorlds uses a hierarchical data model with these core concepts:

### 1. World Metadata
Every OnlyWorlds world has metadata including:
- `id` (UUID): Unique identifier
- `name`: World name
- `description`: Detailed description
- `version`: OnlyWorlds format version (e.g., "0.20.10")
- `user`: Owner UUID
- Time settings: `time_format_names`, `time_basic_unit`, `time_range_min/max`, `time_current`

### 2. Elements (Core Data Objects)
All world content consists of "elements" that fall into specific categories. Each element has:

**Base Properties** (from base_properties.yaml):
- `id` (string, required): Unique identifier
- `name` (string, required): Display name
- `description` (string, optional): Detailed description
- `image_url` (string, optional): Associated image
- `tags` (array of strings, optional): Categorization tags
- `created_at`/`updated_at` (timestamps): Metadata
- `is_public` (boolean): Visibility setting

**Category-Specific Properties**: Each element category adds specialized fields

### 3. Element Categories

The system defines 20+ element categories, each serving specific world-building purposes:

**Core Entities**:
- **Character**: Individual actors (people, NPCs, protagonists)
- **Creature**: Non-human entities (animals, monsters, mythical beings)
- **Object**: Physical items (weapons, tools, artifacts)
- **Location**: Places and geographical features

**Social Structures**:
- **Institution**: Organizations, governments, companies
- **Collective**: Groups, tribes, armies, crews
- **Family**: Bloodlines, houses, dynasties
- **Title**: Ranks, positions, noble titles

**Abstract Concepts**:
- **Trait**: Characteristics, personality aspects, abilities
- **Ability**: Powers, skills, magical abilities
- **Language**: Communication systems, dialects
- **Law**: Rules, regulations, customs

**World Elements**:
- **Species**: Races, ethnicities, biological classifications
- **Phenomenon**: Natural or supernatural occurrences
- **Event**: Historical moments, battles, ceremonies
- **Construct**: Complex concepts, situations, abstract ideas

**Spatial/Organizational**: 
- **Zone**: Defined spaces, districts, magical areas
- **Relation**: Connections between elements

### 4. Typing System

OnlyWorlds uses a hierarchical typing system:
- **Category**: Top-level classification (Character, Object, etc.)
- **Type**: Secondary classification within category
- **Subtype**: Specific variation within type

Example: Character → Human → Noble
Example: Object → Weapon → Sword

## Character Category Deep Dive

Characters are central to most worlds. The character.yaml schema defines:

**Required Fields**:
- Base properties (id, name)

**Optional Descriptive Fields**:
- `species` (string): What kind of being they are
- `age_category` (enum): child, adolescent, adult, elder, ancient, timeless
- `status` (enum): alive, dead, missing, unknown
- `age_years` (integer): Specific age
- `gender`, `pronouns`: Identity information
- `height_cm`, `weight_kg`: Physical measurements
- `appearance`: Physical description
- `personality`: Character traits and behavior
- `background`: History and context
- `occupation`: Current role or job
- `goals`, `fears`, `secrets`: Character depth
- `skills`, `abilities`: Capabilities
- `relationships`: Connections to other elements

**Organizational Fields**:
- `location_id`: Current location
- `faction_ids`: Group memberships
- `title_ids`: Held positions/ranks

## Practical Usage Patterns

### From Literature Analysis (Wager.txt example):
The system can capture rich literary content:
```
Character 'David Cheap' Human - Commander
- Traits: 'Confident on Water', 'Lieutenant's Hope'
- Objects: 'Spyglass' Item - Instrument
- Institutions: 'The Squadron' Military - Fleet
- Events: 'Posting on the Centurion' Military - Assignment
```

### Academic Foundation (Thesis.txt):
OnlyWorlds emerged from research into digital representation of political power, using three core data types:
- **Character**: Individual actors
- **Material**: Physical objects and resources
- **Institution**: Collective organizations

This maps to OnlyWorlds' broader category system while maintaining the core insight about power dynamics and relationships.

## Technical Implementation

**Data Format**: JSON with JSON Schema validation
**Schema Location**: YAML schemas define structure (character.yaml, base_properties.yaml, etc.)
**Versioning**: Semantic versioning for schema evolution
**Validation**: Strict schema compliance required
**Storage**: Flexible - can be files, databases, APIs

## Ecosystem Components

**OnlyWorlds.com**: Main website, user accounts, world management, API
**GitHub Repository**: Schema definitions, tools, community development
**Documentation Site**: Comprehensive specification and guides
**Community**: Discord, GitHub Discussions for collaboration

## Key Guidelines for LLM Engagement

1. **Schema Adherence**: Always reference the YAML schemas as authoritative
2. **Category Selection**: Choose the most specific appropriate category
3. **Relationship Modeling**: Use IDs to reference connections between elements
4. **Typing Hierarchy**: Follow Category → Type → Subtype structure
5. **Required vs Optional**: Respect required fields, suggest relevant optional ones
6. **Consistency**: Maintain naming and structural consistency within a world
7. **Flexibility**: The system accommodates diverse genres and styles

## Common Use Cases

- **Game Development**: NPCs, items, locations, lore
- **Writing Projects**: Character databases, world bibles, story planning
- **Tabletop RPGs**: Campaign worlds, character sheets, setting details
- **Academic Research**: Historical simulations, political modeling
- **Collaborative Worldbuilding**: Shared universe development

## Evolution and Community

OnlyWorlds is explicitly designed as a starting point for community refinement. The standard evolves through:
- GitHub Discussions for proposals
- Schema updates via pull requests
- Community feedback and real-world usage
- Tool developer input and requirements

The goal is a living standard that serves the diverse needs of world creators while maintaining interoperability and data portability across the ecosystem. 